/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InteractiveCodeBlock
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// codeBlockLite.js
var CodeBlock = class extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({
      mode: "open"
    });
    this.initialized = false;
  }
  connectedCallback() {
    window.requestAnimationFrame(() => {
      if (this.initialized)
        return;
      setTimeout(() => {
        this.init();
      });
    });
  }
  init() {
    this.initProperties();
    this.render();
    this.initializeCodeRunner();
    this.initialized = true;
  }
  initProperties() {
    this.disabled = this.getAttribute("read-only") !== null;
    this.language = this.getAttribute("language");
    const sandbox = document.createElement("div");
    let rawCode = this.getText();
    (rawCode.match(/&.+;/ig) || []).forEach((entity) => {
      sandbox.setText(entity);
      rawCode = rawCode.replace(entity, sandbox.getText());
    });
    this.code = rawCode;
    sandbox.remove();
    this.replaceWith = "";
  }
  render() {
    this.shadowRoot.innerHTML = `
      <style>
      .minimal {
        margin: 0 !important;
        padding: 0 !important;
        box-sizing: border-box !important;
        border: none !important;
      }
      .coderunnerContainer {
        overflow: auto;
        resize: vertical;
        padding: 0 1rem;
      }
      .flexCol {
        border: 1px solid #ddd;
        margin: 1rem 0;
        display: flex;
        flex-direction: column;
        position: relative;
      }
      select {
        width: 20%;
        padding: 0.5rem;
        min-width: 100px;
      }
      .coderunnerHeader {
        display: flex;
        border-bottom: 1px solid #ddd;
        width: 100%;
        justify-content: space-between;
        box-sizing: border-box;
        padding: 0.75rem 1.25rem;
      }
      .absolute {
        position: absolute;
      }
      .runButton {
        z-index: 25;
        top: 0.75rem;
        right: 1.25rem; 
        cursor: pointer;
        background: none;
        border: none;
      }
      .coderunnerOutputContainer {
        border-top: 1px solid #ddd;
        padding: 0.3rem 1rem;
      }
      .flexRow {
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      .clearButton {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.25rem;
        color: #ff0000;
        font-weight: 700;
      }
      .coderunnerResult {
        padding: 1.25rem;
        border-radius: 0.5rem;
      }
      .hidden {
        display: none;
      }
      .previewWarning {
          color: gray;
          margin: 0 1rem;
      }
      </style>
      <div class="flexCol">
        ${!this.disabled ? this.createRunButton(true) : ""}
        <div class="previewWarning">
          Read only editor preview, niet representatief voor de web interface
        </div>
        <pre id="code" class="coderunnerContainer">${this.code}</pre>
        <div id="outputContainer" class="coderunnerOutputContainer hidden">
          <div class="flexRow">
            <h3>Output:</h3>
            <button id="clearButton" class="clearButton">X</button>
          </div>
          <hr>
          <pre id="output" class="coderunnerResult"></pre>
        </div>
      </div>
    `;
  }
  createRunButton(absolute) {
    const classList = absolute ? "runButton absolute" : "runButton";
    return `<button id="runButton" class="${classList}"><svg width="32px" height="32px" viewBox="0 0 24.00 24.00" fill="lightgreen" xmlns="http://www.w3.org/2000/svg" transform="rotate(90)" stroke="#2afa00"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC" stroke-width="0.048"></g><g id="SVGRepo_iconCarrier"> <g id="Shape / Triangle"> <path id="Vector" d="M4.37891 15.1999C3.46947 16.775 3.01489 17.5634 3.08281 18.2097C3.14206 18.7734 3.43792 19.2851 3.89648 19.6182C4.42204 20.0001 5.3309 20.0001 7.14853 20.0001H16.8515C18.6691 20.0001 19.5778 20.0001 20.1034 19.6182C20.5619 19.2851 20.8579 18.7734 20.9172 18.2097C20.9851 17.5634 20.5307 16.775 19.6212 15.1999L14.7715 6.79986C13.8621 5.22468 13.4071 4.43722 12.8135 4.17291C12.2957 3.94236 11.704 3.94236 11.1862 4.17291C10.5928 4.43711 10.1381 5.22458 9.22946 6.79845L4.37891 15.1999Z" stroke="#2afa00" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> </g> </g></svg></button>`;
  }
  initializeCodeRunner() {
    if (this.disabled)
      return;
    const runButton = this.shadowRoot.getElementById("runButton");
    const clearButton = this.shadowRoot.getElementById("clearButton");
    clearButton.addEventListener("click", () => {
      if (this.shadowRoot.getElementById("output").getText() === "Running...")
        return;
      this.shadowRoot.getElementById("output").replaceWith("");
      this.shadowRoot.getElementById("outputContainer").classList.add("hidden");
    });
    runButton.addEventListener("click", async (event) => {
      event.preventDefault();
      const requestData = {
        language: this.language,
        code: this.code
      };
      this.setResults("Running...");
      await fetch("http://localhost:8080/code", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestData)
      }).then((response) => response.text()).then((result) => {
        this.setResults(result);
      }).catch((error) => {
        console.error("Error:", error);
        this.setResults("An error occurred. Please try again.");
      });
    });
  }
  setResults(result) {
    const output = this.shadowRoot.getElementById("output");
    const outputContainer = this.shadowRoot.getElementById("outputContainer");
    outputContainer.classList.remove("hidden");
    output.setText(result);
  }
};

// main.ts
var InteractiveCodeBlock = class extends import_obsidian.Plugin {
  async onload() {
    window.customElements.define("code-block", CodeBlock);
    this.registerMarkdownPostProcessor((element, context) => {
      const ignoredLanguages = ["yaml"];
      const codeblocks = element.querySelectorAll("pre > code");
      for (let i = 0; i < codeblocks.length; i++) {
        const codeblock = codeblocks[i];
        const language = codeblock.className.split("-")[1];
        const code = codeblock.getText();
        if (ignoredLanguages.contains(language))
          return;
        const el = document.createElement("code-block");
        el.setAttribute("language", language);
        el.setText(code);
        element.replaceChildren(el);
      }
    });
  }
};

/* nosourcemap */